# SERVER模式 - 部署在demo-airline上收集入站流量
---
apiVersion: extensions.istio.io/v1alpha1
kind: WasmPlugin
metadata:
  name: sp-istio-agent-server
  namespace: istio-system
spec:
  url: oci://docker.io/softprobe/sp-istio-wasm:v0.1.4
  phase: AUTHN
  match:
    - mode: SERVER
  pluginConfig:
    sp_backend_url: "https://o.softprobe.ai"
    enable_inject: false
    traffic_direction: "server"
    collectionRules:
      http:
        server:
          - path: ".*"
        client:
          - host: ".*"
            paths: [".*"]
  vmConfig:
    env:
      - name: ENVOY_LOG_LEVEL
        value: "debug"
      - name: WASM_LOG_LEVEL
        value: "debug"
---
# CLIENT模式 - 部署在demo-ota上收集出站流量
apiVersion: extensions.istio.io/v1alpha1
kind: WasmPlugin
metadata:
  name: sp-istio-agent-client
  namespace: istio-system
spec:
  url: oci://docker.io/softprobe/sp-istio-wasm:v0.1.4
  phase: AUTHN
  match:
    - mode: CLIENT
  pluginConfig:
    api_key: "demo-ota-01"
    sp_backend_url: "https://o.softprobe.ai"
    enable_inject: false
    traffic_direction: "client"
    collectionRules:
      http:
        server:
          - path: ".*"
        client:
          - host: ".*"
            paths: [".*"]
  vmConfig:
    env:
      - name: ENVOY_LOG_LEVEL
        value: "debug"
      - name: WASM_LOG_LEVEL
        value: "debug"
---
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: softprobe-backend
  namespace: istio-system
spec:
  hosts:
  - o.softprobe.ai
  ports:
  - number: 443
    name: https
    protocol: HTTPS
  - number: 80
    name: http
    protocol: HTTP
  location: MESH_EXTERNAL
  resolution: DNS
---
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: softprobe-backend-tls
  namespace: istio-system
spec:
  host: o.softprobe.ai
  trafficPolicy:
    tls:
      mode: SIMPLE
      sni: o.softprobe.ai
---
# EnvoyFilter - 自动注入应用名header（应用到所有工作负载）
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: inject-app-name-header
  namespace: default
spec:
  configPatches:
  # 配置1: SIDECAR_INBOUND - 处理入站请求（server端）
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.lua
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
          inline_code: |
            function envoy_on_request(request_handle)
              -- 先删除原有的x-sp-service-name头部，防止重复
              request_handle:headers():remove("x-sp-service-name")
              
              local service_name = nil
              
              -- 方法1: 从OTEL_SERVICE_NAME环境变量获取（优先级最高）
              local otel_service_name = os.getenv("OTEL_SERVICE_NAME")
              if otel_service_name and otel_service_name ~= "" then
                service_name = otel_service_name
              end
              
              -- 方法2: 从APP_NAME环境变量获取
              if not service_name then
                local app_name = os.getenv("APP_NAME")
                if app_name and app_name ~= "" then
                  service_name = app_name
                end
              end
              
              -- 方法2: 从SERVICE_NAME环境变量获取
              if not service_name then
                local svc_name = os.getenv("SERVICE_NAME")
                if svc_name and svc_name ~= "" then
                  service_name = svc_name
                end
              end
              
              -- 方法3: 从POD_NAME环境变量获取并解析
              if not service_name then
                local pod_name = os.getenv("POD_NAME")
                if pod_name and pod_name ~= "" then
                  -- 从pod名称中提取应用名（格式：app-name-deployment-hash-pod-hash）
                  -- 匹配到倒数第二个连字符之前的部分
                  local extracted_app = string.match(pod_name, "^(.+)%-[^%-]+%-[^%-]+$")
                  if extracted_app and extracted_app ~= "" then
                    service_name = extracted_app
                  end
                end
              end
              
              -- 方法4: 从HOSTNAME中提取应用名
              if not service_name then
                local hostname = os.getenv("HOSTNAME")
                if hostname and hostname ~= "" then
                  -- 尝试从hostname中提取应用名（格式：app-name-deployment-hash-pod-hash）
                  -- 匹配到倒数第二个连字符之前的部分
                  local extracted_app = string.match(hostname, "^(.+)%-[^%-]+%-[^%-]+$")
                  if extracted_app and extracted_app ~= "" then
                    service_name = extracted_app
                  end
                end
              end
              
              -- 方法5: 从APP_LABEL环境变量获取（Downward API）
              if not service_name then
                local app_label = os.getenv("APP_LABEL")
                if app_label and app_label ~= "" then
                  service_name = app_label
                end
              end
              
              -- 方法6: 从SERVICE_LABEL环境变量获取（Downward API）
              if not service_name then
                local service_label = os.getenv("SERVICE_LABEL")
                if service_label and service_label ~= "" then
                  service_name = service_label
                end
              end
              
              -- 方法7: 从CONTAINER_NAME获取
              if not service_name then
                local container_name = os.getenv("CONTAINER_NAME")
                if container_name and container_name ~= "" then
                  service_name = container_name
                end
              end
              
              -- 方法8: 从DEPLOYMENT_NAME获取
              if not service_name then
                local deployment = os.getenv("DEPLOYMENT_NAME")
                if deployment and deployment ~= "" then
                  service_name = deployment
                end
              end
              
              -- 方法9: 从K8S相关环境变量获取
              if not service_name then
                local k8s_app = os.getenv("K8S_APP") or os.getenv("KUBERNETES_APP")
                if k8s_app and k8s_app ~= "" then
                  service_name = k8s_app
                end
              end
              
              -- 方法10: 从命名空间获取（如果不是default）
              if not service_name then
                local namespace = os.getenv("POD_NAMESPACE") or os.getenv("KUBERNETES_NAMESPACE")
                if namespace and namespace ~= "" and namespace ~= "default" then
                  service_name = namespace
                end
              end
              
              -- 如果所有方法都失败，使用默认值
              if not service_name or service_name == "" then
                service_name = "unknown-service"
              end
              
              -- 统一放在x-sp-service-name中
              request_handle:headers():add("x-sp-service-name", service_name)
              
              -- 保留原有的headers以便兼容
              request_handle:headers():add("x-service-name", service_name)
              request_handle:headers():add("x-current-service", service_name .. "-workload")
              
              -- 添加调试信息headers
              local hostname = os.getenv("HOSTNAME")
              if hostname then
                request_handle:headers():add("x-debug-hostname", hostname)
              end
              
              local pod_name = os.getenv("POD_NAME")
              if pod_name then
                request_handle:headers():add("x-debug-pod-name", pod_name)
              end
              
              local namespace = os.getenv("POD_NAMESPACE")
              if namespace then
                request_handle:headers():add("x-debug-namespace", namespace)
              end
              
              local service_account = os.getenv("KUBERNETES_SERVICE_ACCOUNT")
              if service_account then
                request_handle:headers():add("x-debug-service-account", service_account)
              end
            end
  # 配置2: SIDECAR_OUTBOUND - 处理出站请求（client端）
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_OUTBOUND
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.lua
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
          inline_code: |
            function envoy_on_request(request_handle)
              -- 先删除原有的x-sp-service-name头部，防止重复
              request_handle:headers():remove("x-sp-service-name")
              
              local service_name = nil
              
              -- 方法1: 从OTEL_SERVICE_NAME环境变量获取（优先级最高）
              local otel_service_name = os.getenv("OTEL_SERVICE_NAME")
              if otel_service_name and otel_service_name ~= "" then
                service_name = otel_service_name
              end
              
              -- 方法2: 从APP_NAME环境变量获取
              if not service_name then
                local app_name = os.getenv("APP_NAME")
                if app_name and app_name ~= "" then
                  service_name = app_name
                end
              end
              
              -- 方法2: 从SERVICE_NAME环境变量获取
              if not service_name then
                local svc_name = os.getenv("SERVICE_NAME")
                if svc_name and svc_name ~= "" then
                  service_name = svc_name
                end
              end
              
              -- 方法3: 从POD_NAME环境变量获取并解析
              if not service_name then
                local pod_name = os.getenv("POD_NAME")
                if pod_name and pod_name ~= "" then
                  -- 从pod名称中提取应用名（格式：app-name-deployment-hash-pod-hash）
                  -- 匹配到倒数第二个连字符之前的部分
                  local extracted_app = string.match(pod_name, "^(.+)%-[^%-]+%-[^%-]+$")
                  if extracted_app and extracted_app ~= "" then
                    service_name = extracted_app
                  end
                end
              end
              
              -- 方法4: 从HOSTNAME中提取应用名
              if not service_name then
                local hostname = os.getenv("HOSTNAME")
                if hostname and hostname ~= "" then
                  -- 尝试从hostname中提取应用名（格式：app-name-deployment-hash-pod-hash）
                  -- 匹配到倒数第二个连字符之前的部分
                  local extracted_app = string.match(hostname, "^(.+)%-[^%-]+%-[^%-]+$")
                  if extracted_app and extracted_app ~= "" then
                    service_name = extracted_app
                  end
                end
              end
              
              -- 方法5: 从APP_LABEL环境变量获取（Downward API）
              if not service_name then
                local app_label = os.getenv("APP_LABEL")
                if app_label and app_label ~= "" then
                  service_name = app_label
                end
              end
              
              -- 方法6: 从SERVICE_LABEL环境变量获取（Downward API）
              if not service_name then
                local service_label = os.getenv("SERVICE_LABEL")
                if service_label and service_label ~= "" then
                  service_name = service_label
                end
              end
              
              -- 方法7: 从CONTAINER_NAME获取
              if not service_name then
                local container_name = os.getenv("CONTAINER_NAME")
                if container_name and container_name ~= "" then
                  service_name = container_name
                end
              end
              
              -- 方法8: 从DEPLOYMENT_NAME获取
              if not service_name then
                local deployment = os.getenv("DEPLOYMENT_NAME")
                if deployment and deployment ~= "" then
                  service_name = deployment
                end
              end
              
              -- 方法9: 从K8S相关环境变量获取
              if not service_name then
                local k8s_app = os.getenv("K8S_APP") or os.getenv("KUBERNETES_APP")
                if k8s_app and k8s_app ~= "" then
                  service_name = k8s_app
                end
              end
              
              -- 方法10: 从命名空间获取（如果不是default）
              if not service_name then
                local namespace = os.getenv("POD_NAMESPACE") or os.getenv("KUBERNETES_NAMESPACE")
                if namespace and namespace ~= "" and namespace ~= "default" then
                  service_name = namespace
                end
              end
              
              -- 如果所有方法都失败，使用默认值
              if not service_name or service_name == "" then
                service_name = "unknown-service"
              end
              
              -- 统一放在x-sp-service-name中
              request_handle:headers():add("x-sp-service-name", service_name)
              
              -- 保留原有的headers以便兼容
              request_handle:headers():add("x-service-name", service_name)
              request_handle:headers():add("x-current-service", service_name .. "-workload")
              
              -- 添加调试信息headers
              local hostname = os.getenv("HOSTNAME")
              if hostname then
                request_handle:headers():add("x-debug-hostname", hostname)
              end
              
              local pod_name = os.getenv("POD_NAME")
              if pod_name then
                request_handle:headers():add("x-debug-pod-name", pod_name)
              end
              
              local namespace = os.getenv("POD_NAMESPACE")
              if namespace then
                request_handle:headers():add("x-debug-namespace", namespace)
              end
              
              local service_account = os.getenv("KUBERNETES_SERVICE_ACCOUNT")
              if service_account then
                request_handle:headers():add("x-debug-service-account", service_account)
              end
            end


